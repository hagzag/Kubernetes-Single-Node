---

- name: "Initialize the python_bin fact"
  set_fact:
    python_bin: "python"

- name: "Update facts if this is Ubuntu 14.04"
  set_fact:
    bin_dir: "/bin"
    kube_script_dir: "/opt/bin/kubernetes"
    python_bin: "/opt/bin/python"
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_major_version|int < 15

- name: "Create kubernetes config directory"
  file: 
   path: "{{ kube_config_dir }}" 
   state: directory

- name: "Write the global config file"
  template: 
   src: "config.j2" 
   dest: "{{ kube_config_dir }}/config"
  notify:
  - restart daemons

- name: "Create kubernetes script directory"
  file: 
   path: "{{ kube_script_dir }}" 
   state: "directory"

- name: "Create system kube-cert groups"
  group: 
   name: "{{ kube_cert_group }}" 
   state: present 
   system: yes

- name: "Create system kube user"
  user:
    name: kube
    comment: "Kubernetes user"
    shell: /sbin/nologin
    state: present
    system: yes
    groups: "{{ kube_cert_group }}"

- name: "make sure the certificate directory exits"
  file:
    path: "{{ kube_cert_dir }}"
    state: directory
    mode: "o-rwx"
    group: "{{ kube_cert_group }}"

- name: "make sure the tokens directory exits"
  file:
    path: "{{ kube_token_dir }}"
    state: directory
    mode: "o-rwx"
    group: "{{ kube_cert_group }}"

- name: "Install openssl for easy-rsa stuff"
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: "{{ item }}"
    state: latest
  with_items:
  - openssl
  - curl

- name: "overwrite make-ca-cert.sh from local copy"
  copy:
    src: "make-ca-cert.sh"
    dest: "{{ kube_script_dir }}"
    mode: 0500
  changed_when: false

- name: "Run create cert script on master"
  command:
    "{{ kube_script_dir }}/make-ca-cert.sh"
  args:
    creates: "{{ kube_cert_dir }}/server.crt"
  environment:
    MASTER_IP: "{{ kube_cert_ip }}"
    MASTER_NAME: "{{ inventory_hostname }}"
    DNS_DOMAIN: "{{ dns_domain }}"
    SERVICE_CLUSTER_IP_RANGE: "{{ kube_service_addresses }}"
    CERT_DIR: "{{ kube_cert_dir }}"
    CERT_GROUP: "{{ kube_cert_group }}"
    HTTP_PROXY: "{{ http_proxy|default('') }}"
    HTTPS_PROXY: "{{ https_proxy|default('') }}"

- name: "Verify certificate permissions"
  file:
    path: "{{ item }}"
    group: "{{ kube_cert_group }}"
    owner: kube
    mode: 0440
  with_items:
  - "{{ kube_cert_dir }}/ca.crt"
  - "{{ kube_cert_dir }}/server.crt"
  - "{{ kube_cert_dir }}/server.key"
  - "{{ kube_cert_dir }}/kubecfg.crt"
  - "{{ kube_cert_dir }}/kubecfg.key"

- name: "Read back the CA certificate"
  slurp:
    src: "{{ kube_cert_dir }}/ca.crt"
  register: ca_cert
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: "Register the CA certificate as a fact so it can be used later"
  set_fact:
    kube_ca_cert: "{{ ca_cert.content|b64decode }}"

- name: "Place CA certificate and kube_cfg credentials everywhere"
  copy: 
   content: "{{ kube_ca_cert }}" 
   dest: "{{ kube_cert_dir }}/ca.crt"

- name: "Read back the kubecfg key"
  slurp:
    src: "{{ kube_cert_dir }}/kubecfg.key"
  register: api_key
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: "Register the cfg key as a fact so it can be used later"
  set_fact:
    kube_api_key: "{{ api_key.content|b64decode }}"

- name: "Place CA certificate and kube_cfg credentials everywhere"
  copy: 
   content: "{{ kube_api_key }}" 
   dest: "{{ kube_cert_dir }}/kubecfg.key"

- name: "Read back the kubecfg cert"
  slurp:
    src: "{{ kube_cert_dir }}/kubecfg.crt"
  register: api_crt
  run_once: true
  delegate_to: "{{ groups['masters'][0] }}"

- name: "Register the cfg cert as a fact so it can be used later"
  set_fact:
    kube_api_crt: "{{ api_crt.content|b64decode }}"

- name: "Place CA certificate and kube_cfg credentials everywhere"
  copy: 
   content: "{{ kube_api_crt }}" 
   dest: "{{ kube_cert_dir }}/kubecfg.crt"
  notify:
  - restart daemons

- name: "Copy the token gen script"
  copy:
    src: "kube-gen-token.sh"
    dest: "{{ kube_script_dir }}"
    mode: "u+x"

- name: "Generate tokens for master components"
  command: "{{ kube_script_dir }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: "{{ kube_token_dir }}"
  with_nested:
  - [ "system:controller_manager", "system:scheduler", "system:kubectl" ]
  - "{{ groups['masters'] }}"
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
  - restart daemons

- name: "Generate tokens for node components"
  command: "{{ kube_script_dir }}/kube-gen-token.sh {{ item[0] }}-{{ item[1] }}"
  environment:
    TOKEN_DIR: "{{ kube_token_dir }}"
  with_nested:
  - [ 'system:kubelet', 'system:proxy' ]
  - "{{ groups['nodes'] }}"
  register: gentoken
  changed_when: "'Added' in gentoken.stdout"
  notify:
  - restart daemons
